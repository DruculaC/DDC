C51 COMPILER V9.51   TIMER                                                                 03/14/2014 16:47:54 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE TIMER
OBJECT MODULE PLACED IN Timer.OBJ
COMPILER INVOKED BY: D:\Program Files (x86)\keil\C51\BIN\C51.EXE Timer.c BROWSE DEBUG OBJECTEXTEND TABS(3)

line level    source

   1          /*---------------------------------------------------
   2             Timer.c (v1.00)
   3             
   4             Timer functions
   5          ---------------------------------------------------*/ 
   6          
   7          #include "main.h"
   8          #include "port.h"
   9          
  10          #include "Timer.h"
  11          #include "communication.h"
  12          #include "voice.h"
  13          #include "Delay.h"
  14          #include "Battery.h"
  15          #include "AD.h"
  16          #include "Other.h"
  17          #include "operation.h"
  18          
  19          // ------ Public variable declarations -----------------------------
  20          bit stolen_alarm_flag = 0;             // when host been touch 3 times, this flag 1 before alarm voice present, no
             -t to detect sensor for 1st voice alarm.
  21          bit host_stolen_speech_EN = 0;         // when host been touch 3 times, enable 3rd alarm voice.
  22          bit battery_check=0;                   // 2ÖÃ1Ê±£¬Ö´ÐÐÒ»´ÎµçÁ¿×ª»»£¬Ö´ÐÐÍêºó£¬½«ÆäÖÃ0
  23          bit position_sensor_EN=0;        //Î»ÖÃ´«¸ÐÆ÷£¬¼´µ¹µØÌ§Æð´«¸ÐÆ÷×Ü¿ª¹Ø£¬1µÄÊ±ºò£¬¼ì²âÕâÁ½¸ö´«¸ÐÆ÷
  24          bit slave_away_speech_EN=0;      //ÅÐ¶Ï¸½»úÀë¿ªºó£¬ÓïÒôÌáÊ¾£¬ÔÚmainÀïÃæ²Ù×÷
  25          bit magnet_CW_EN = 0;               //µç´ÅÌúË³Ê±Õë×ª¶¯Ê¹ÄÜ£¬×ª¶¯Ò»´Îºó¸´Î»Îª0
  26          bit magnet_ACW_EN=0;                //µç´ÅÌúÄæÊ±Õë×ª¶¯Ê¹ÄÜ£¬×ª¶¯Ò»´Îºó¸´Î»Îª0
  27          bit comm_whole_control=0;           //Í¨ÐÅ×Ü¿ª¹Ø£¬0¹Ø±ÕÍ¨ÐÅ£¬1´ò¿ªÍ¨ÐÅ
  28          tWord host_stolen_speech_count=0;   //ÅÐ¶ÏÖ÷»ú±»µÁºó£¬ÓïÒôÌáÊ¾µÄ´ÎÊý
  29          bit slave_nearby_speech_EN=0;       //ÅÐ¶Ï¸½½ü¿¿½üºó£¬ÓïÒôÌáÊ¾£¬ÔÚmainÀïÃæ²Ù×÷
  30          bit host_stolen_alarm1_EN = 0;      //ÅÐ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚÒ»¶ÎÓïÒôÊ¹ÄÜ
  31          bit host_stolen_alarm2_EN = 0;      //ÅÐ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚ¶þ¶ÎÓïÒôÊ¹ÄÜ
  32          tByte host_stolen_alarm1_count = 0;    //ÅÐ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚÒ»¶ÎÓïÒô´ÎÊý
  33          tByte host_stolen_alarm2_count = 0;    //ÅÐ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚ¶þ¶ÎÓïÒô´ÎÊý
  34          bit fell_flag=0;                 //ÅÐ¶ÏÖ÷»úµ¹ÏÂºó£¬ÖÃ1
  35          bit slave_away = 1;              // flag for slave, 1 means away, 0 means nearby
  36          tByte leave_count=0;             // increment every 2s, reset for every success communication
  37          bit raised_flag=0;               //ÅÐ¶ÏÖ÷»ú±»Ì§Æðºó£¬ÖÃ1
  38          tByte sensor_2ndstage_LV_time=0;    //´«¸ÐÆ÷½øÈëµÚ¶þ½×¶Î¼ì²âÊ±£¬¼ÆËãµÍµçÆ½µÄÊ±¼ä
  39          tByte sensor_2ndstage_count = 0;    //´«¸ÐÆ÷½øÈëµÚ¶þ½×¶Î¼ì²âÊ±£¬¼ÆËãµÍµçÆ½µÄÊ±¼ä
  40          tByte host_2ndtouch_speech_count = 0;     //Ö÷»ú±»µÚ¶þ´Î´¥Åöºó£¬ÓïÒôÌáÊ¾µÄ´ÎÊý
  41          tWord sensor_3rdstage_time = 0;        //´«¸ÐÆ÷½øÈëµÚÈý½×¶ÎµÄÊ±¼ä£¬
  42          tByte sensor_3rdstage_effcount = 0;    //´«¸ÐÆ÷½øÈëµÚÈý½×¶Îºó£¬ÓÐÐ§´¥Åö´ÎÊýµÄ¼ÆÊý
  43          tByte sensor_3rdstage_count = 0;       //´«¸ÐÆ÷½øÈëµÚÈý½×¶Îºó£¬µÍµçÆ½µÄ¼ÆÊý
  44          tWord sensor_3rdstage_interval = 0;    //´«¸ÐÆ÷ÔÚµÚÈý½×¶ÎÖÐ£¬Ã¿´ÎÓÐÐ§µÍµçÆ½¼ÆÊýÖ®¼äµÄÊ±¼ä¼ä¸ô¡£ÔÚÕâÆÚ¼äµÄµÍµ
             -çÆ½²»ÈÏÎªÓÐÐ§¡£
  45          bit host_touch_speech_EN = 0;          //µÚÒ»´Î´¥ÅöºóÓïÒôÊ¹ÄÜ
  46          bit host_2ndtouch_speech_EN = 0;       //µÚ¶þ´Î´¥ÅöºóÓïÒôÊ¹ÄÜ
  47          bit raised_fell_flag = 0;              //µ¹µØ»òÕßÌ§Æð´¥·¢ºó£¬´Ë±êÖ¾Î»ÖÃ1
  48          tByte sensor_trigger_count=0;    //´«¸ÐÆ÷´¥·¢¼ÆÊý
  49          tWord sensor_2ndstage_time=0;    //´«¸ÐÆ÷½øÈëµÚ¶þ½×¶ÎºóÁ÷ÊÅÊ±¼äµÄ¼ÆÊý
  50          tByte sensor_1ststage_count=0;   //´«¸ÐÆ÷µÚÒ»½×¶ÎÅÐ¶ÏµÍµçÆ½µÄ¼ÆÊý
  51          tByte nearby_away_interval = 0;     //¸½»úÀë¿ªºÍ¿¿½üÊ±£¬ÓïÒôÌáÊ¾ºÍ¿ª¹ØËøµÄÊ±¼ä¼ä¸ô
  52          bit magnet_ACW_flag=0;
  53          
C51 COMPILER V9.51   TIMER                                                                 03/14/2014 16:47:54 PAGE 2   

  54          // ------ Private variable definitions -----------------------------
  55          tByte timer0_8H, timer0_8L, timer1_8H, timer1_8L;     // register value of timer0 and timer1, caculated from 
             -InitTimer()
  56          
  57          tByte host_touch_speech_count=0;
  58          tByte host_touched_flag=0;       //Ö÷»ú±»´¥ÅöºóÖÃ1£¬½øÐÐºóÃæµÄ´«¸ÐÆ÷ÅÐ¶Ï
  59          tByte raised_alarm_count = 0;    //Ö÷»ú±»Ì§Æðºó£¬Ïò¸½»ú·¢³ö±¨¾¯ÐÅºÅµÄ´ÎÊý
  60          tByte fell_alarm_count=0;        //Ö÷»úµ¹µØºó£¬Ïò¸½»ú·¢³ö±¨¾¯ÐÅºÅµÄ´ÎÊý
  61          tWord timer0_count=0;      // counter for timer0, increment every ticket         
  62          tByte received_data_buffer[7]={0x00,0x00,0x00,0x00,0x00,0x00,0x00};     //½ÓÊÕÊý¾Ý»º´æ
  63          bit receive_data_finished_flag = 0;    //½ÓÊÕÕâÒ»´®Êý¾ÝÍê³Éºó£¬´Ë±êÖ¾Î»ÖÃ1
  64          tByte data_count = 0;            //½ÓÊÕÊý¾Ý»º´æµÄÎ»Êý£¬¼´±íÃ÷µÚ¼¸¸ö»º´æÊý¾Ý
  65          tByte one_receive_byte = 0;      //½ÓÊÕÊý¾ÝµÄÒ»¸ö×Ö½Ú£¬½ÓÊÕÍêºó½«Æä¸³Öµ¸øreceived_data_bufferÏà¶ÔÓ¦µÄ×Ö½Ú
  66          tByte one_receive_byte_count = 0;         //one_receive_byteÓÐ8Î»£¬´Ë¼ÆÊý±íÃ÷½ÓÊÕµ½µÚ¼¸Î»£¬Ã¿´Î¼ÆÊýµ½8µÄÊ±ºò±íÃ÷
             -Ò»¸ö×Ö½Ú½ÓÊÕÍê³É¡£
  67          bit receive_wire_flag = 1;    //½ÓÊÕÍ¨ÐÅÏßµÄ±êÖ¾Î»£¬1±íÃ÷¸ßµçÆ½£¬0±íÃ÷µÍµçÆ½£¬Ã¿´Îtimer1Òç³öÊ±£¬ÅÐ¶ÏP1.1Ò»´Î
             -¡£ÒÔ´ËÀ´±íÃ÷ÊÇ·ñÎªÒ»´ÎÕýÈ·µÄÏÂ½µÑØ
  68          tByte receive_HV_count = 0;      //¶¨Ê±Æ÷T1ÔÚÃ»ÓÐÐÅºÅµ½À´µÄÊ±ºò£¬¶Ô¸ßµçÆ½¼ÆÊý£¬Ò»µ©³¬¹ýÄ³¸öÖµ£¬Ôò½«one_receive
             -_byte_countÇå0
  69          tByte receive_LV_count = 0;      //Ã¿´Îtimer1Òç³öÊ±ÅÐ¶Ï½ÓÊÕÏßÈç¹ûÎªLV£¬Ôò¼ÆÊý¼Ó1£¬ÒÔ´ËÀ´±íÃ÷µÍµçÆ½µÄÊ±¼ä
  70          tByte fell_wire_time=0;          //µ¹µØ¼ì²âÏß£¬¼ì²âµÍµçÆ½µÄÊ±¼ä
  71          tByte raise_wire_time=0;         //Ì§Æð¼ì²âÏß£¬¼ì²âµÍµçÆ½µÄÊ±¼ä
  72          tWord raised_fell_number = 0;          //µ¹µØ»òÕßÌ§Æð³ö·¢ºó£¬¼ÆÊý£¬µ½´ïÒ»¶¨ÊýÖµºó£¬½«ÆäÓë±êÖ¾Î»Ò»ÆðÇåÁã¡£
  73          bit raised_fell_once_flag = 0;         //raised_fell_flagÊÇ·ñÔø¾­±êÖ¾¹ý£¬Èç¹û±êÖ¾¹ýÔòÖÃ1.È»ºóÖ÷»ú±»»Ö¸´µ¹µØ»òÕß»
             -Ö¸´Ì§ÆðÊ±£¬´Ë±êÖ¾Î»¸´Î»¡£
  74          tByte key_rotated_on_flag=0;        //µç¶¯³µ¿ªÆô¹Ø±Õ±êÖ¾Î»£¬1±íÊ¾µç¶¯³µ¿ªÆôÁË£¬0±íÊ¾µç¶¯³µ¹Ø±ÕÁË
  75          tByte slave_nearby_speech_count=0;
  76          tByte slave_away_speech_count=0;
  77          tWord ADC_check_result = 0;      //×÷ÎªAD¼ì²âÖµ
  78          bit slave_nearby_EN = 0;         // ×÷Îªslave¿¿½üºó²Ù×÷µÄÊ¹ÄÜ
  79          tByte slave_nearby_operation_count = 0;   // ×÷Îªslave¿¿½üºó²Ù×÷µÄ´ÎÊý
  80          tByte wire_broken_count = 0;     // ×÷Îª¶ÏÏßºóµÄÊ±¼ä¼ì²â
  81          bit battery_stolen_EN = 0;       // ×÷Îªµç³Ø±»µÁµÄÊ¹ÄÜ¶Ë
  82          tByte battery_stolen_count = 0;  // ×÷Îªµç³Ø±»µÁµÄ±¨¾¯´ÎÊý
  83          bit horizontal_vibration = 0;    // ±íÊ¾´¹Ö±´«¸ÐÆ÷ÔÚÕñ¶¯£¬´ËÊ±¾ÍËã¹ØÔ¿³×£¬Ò²²»ÄÜÖ´ÐÐ¹ØÔ¿³×µÄ²Ù×÷¡
  84          tWord horizontal_vibration_count = 0;  //´¹Ö±´«¸ÐÆ÷´¥·¢ºó£¬¶ÔÊ±¼ä½øÐÐ¼ÆÊý¡£
  85          
  86          /*------------------------------------------------------------------
  87             timerT0()
  88             operation every ticket.
  89          --------------------------------------------------------------------*/
  90          
  91          void timer0() interrupt interrupt_timer_0_overflow
  92             {
  93   1         // manually reload timer0 configuration
  94   1         TH0 = timer0_8H;
  95   1         TL0 = timer0_8L;
  96   1         
  97   1         // timer0 is 1ms ticket, count the time flow of timer0, then operate every 2s.
  98   1         if(++timer0_count >= 2000)
  99   1            {
 100   2      
 101   2            // transmit the verification signal
 102   2            ComMode_1_Data();    
 103   2            
 104   2            // judge the communication control is on
 105   2            if(comm_whole_control == 1)
 106   2               {
 107   3               // if communication is on, increase the leave_count every 2s.
 108   3      //       if((++leave_count >= 2)&&(slave_away == 0))
 109   3               if(++leave_count >= 2)
 110   3                  {
C51 COMPILER V9.51   TIMER                                                                 03/14/2014 16:47:54 PAGE 3   

 111   4                  leave_count = 4;
 112   4                  
 113   4                  if((key_rotate == 1)&&(slave_away == 0))
 114   4                     {
 115   5                     if(nearby_away_interval > 6)
 116   5                        {
 117   6                        // turn off the magnet 
 118   6                        magnet_ACW();
 119   6                        nearby_away_interval = 0;
 120   6                        
 121   6                        // flag slave already away
 122   6                        slave_away = 1;
 123   6                        }
 124   5                     }
 125   4                  // enable position sensor(vertical and horizontal) and vibration sensor
 126   4                  position_sensor_EN=1;   
 127   4                  sensor_EN = 1;
 128   4                  if(sensor_EN == 0)
 129   4                     {
 130   5                     // reset relatively sensor count
 131   5                     sensor_trigger_count=0;
 132   5                     sensor_1ststage_count=0;               
 133   5                     }
 134   4                  
 135   4                  slave_nearby_EN = 0;
 136   4                  slave_nearby_operation_count = 0;
 137   4                  }
 138   3               }
 139   2            // reset timer0 ticket counter every 2s
 140   2            timer0_count=0;
 141   2            
 142   2            // detect the battery voltage
 143   2            ADC_check_result = GetADCResult(6); 
 144   2            
 145   2            // if fell and raised flag is 1, send alarm signal every 2s.
 146   2            if((fell_flag==1)&&(fell_alarm_count<5))
 147   2               {
 148   3               ComMode_5_Data();
 149   3               fell_alarm_count++;
 150   3               }
 151   2            if((raised_flag==1)&&(raised_alarm_count<5))    
 152   2               {
 153   3               ComMode_4_Data();
 154   3               raised_alarm_count++;
 155   3               }
 156   2               
 157   2            if(++nearby_away_interval > 6)
 158   2               {
 159   3               nearby_away_interval = 7;
 160   3               }
 161   2               
 162   2            // detect whether key is rotated on,  
 163   2            if((key_rotated_on_flag == 0)||(slave_away == 1))
 164   2               {
 165   3               if(key_rotate == 1)     
 166   3                  {
 167   4                  Delay(5);
 168   4                  // anti-trigger, Delay(5) confirm the key rotation.
 169   4                  if(key_rotate == 1)
 170   4                     {
 171   5                     if((slave_nearby_EN == 1)&&(slave_nearby_operation_count < 1))
 172   5                        {
C51 COMPILER V9.51   TIMER                                                                 03/14/2014 16:47:54 PAGE 4   

 173   6                        slave_nearby_operation();
 174   6                        // flag key rotation status
 175   6                        key_rotated_on_flag = 1;
 176   6                        }
 177   5                     // reset the battery stolen flag
 178   5                     battery_stolen_EN = 0;
 179   5                     battery_stolen_count = 0;
 180   5                     }
 181   4                  leave_count = 0;
 182   4                  } 
 183   3               }
 184   2            
 185   2            // detect whether key is rotated off
 186   2            if((sensor_detect == 1)&&(horizontal_sensor == 1))
 187   2               {
 188   3               if((key_rotate == 0)&&(key_rotated_on_flag == 1))
 189   3                  {
 190   4                  Delay(5);
 191   4                  if(key_rotate == 0)
 192   4                     {
 193   5                     // handle with battery status
 194   5                     verifybattery(ADC_check_result);
 195   5                     // reset key rotation flag
 196   5                     key_rotated_on_flag=0;
 197   5                     
 198   5                     slave_away_operation();
 199   5                     }
 200   4                  
 201   4                  leave_count = 0;
 202   4                  }           
 203   3               }
 204   2            
 205   2            // whether host has been touched 3 times, if yes, then alarm 2 speech alternantively.
 206   2            if((host_stolen_alarm1_EN == 1)&&(host_stolen_alarm1_count < 4))
 207   2               {
 208   3               stolen_alarm_flag = 1;
 209   3               if(key_rotate == 0)
 210   3                  {
 211   4                  ComMode_3_Data();
 212   4                  stolen_alarm_speech1();
 213   4                  }
 214   3               if(++host_stolen_alarm1_count >= 4)
 215   3                  {
 216   4                  host_stolen_alarm1_count = 0;
 217   4                  host_stolen_alarm1_EN = 0;
 218   4                  stolen_alarm_flag = 0;
 219   4                  }
 220   3               }
 221   2            if((host_stolen_alarm2_EN == 1)&&(host_stolen_alarm2_count < 4))
 222   2               {
 223   3               stolen_alarm_flag = 1;
 224   3               if(key_rotate == 0)
 225   3                  {
 226   4                  ComMode_3_Data();
 227   4                  stolen_alarm_speech2();
 228   4                  }
 229   3               if(++host_stolen_alarm2_count >= 4)
 230   3                  {
 231   4                  host_stolen_alarm2_count = 0;
 232   4                  host_stolen_alarm2_EN = 0;
 233   4                  stolen_alarm_flag = 0;
 234   4                  }
C51 COMPILER V9.51   TIMER                                                                 03/14/2014 16:47:54 PAGE 5   

 235   3               }
 236   2            
 237   2            if((battery_stolen_EN == 1)&&(battery_stolen_count < 2))
 238   2               {
 239   3               ComMode_2_Data();
 240   3               battery_stolen_speech();
 241   3               battery_stolen_count++;
 242   3               }
 243   2            }     
 244   1      
 245   1         // judge host is fell or raised every 1ms?
 246   1         if(raised_fell_flag == 0)
 247   1            {
 248   2            // judge vibration sensor is enable?
 249   2            if(sensor_EN == 1)   
 250   2               {
 251   3               
 252   3               // sensor trigger status, 0, 1 or 2?
 253   3               switch(sensor_trigger_count)
 254   3                  {
 255   4                  // case 0, it means host is in waiting status. waiting for first touch.
 256   4                  case 0:
 257   4                     {
 258   5                     
 259   5                     // judge host been touched and also not in vibration alarm
 260   5      //             if((sensor_detect == 0)&&(stolen_alarm_flag == 0)&&(transmiter_EN == 1))      
 261   5                     if(((sensor_detect == 0)||(horizontal_sensor == 0))&&(stolen_alarm_flag == 0))      
 262   5                        {
 263   6                        // judge LV is more than 2ms, if yes, it means a effective touch
 264   6                        if(++sensor_1ststage_count >= 2)       
 265   6                           {
 266   7                           sensor_1ststage_count=0;
 267   7                           
 268   7                           // sensor trigge status progress to case 1.
 269   7                           sensor_trigger_count = 1;
 270   7                           // alarm speech for first touoch
 271   7                           host_touch_speech();
 272   7                           }
 273   6                        }
 274   5                     else
 275   5                        {
 276   6                        // if no LV, reset the count.
 277   6                        sensor_1ststage_count = 0;
 278   6                        }
 279   5                     }
 280   4                  break;
 281   4                  
 282   4                  // waiting for next touch, 
 283   4                  case 1:
 284   4                     {
 285   5                     if((sensor_detect == 0)||(horizontal_sensor == 0))
 286   5                        {
 287   6                        // LV for 2s, means a effective touch
 288   6                        if(++sensor_2ndstage_count >= 2)
 289   6                           {
 290   7                           sensor_2ndstage_count = 0;
 291   7                           sensor_trigger_count = 2;
 292   7                           host_2ndtouch_speech_count = 0;
 293   7                           // alarm speech for 2nd touch
 294   7                           host_2ndtouch_speech();
 295   7                           }
 296   6                        }
C51 COMPILER V9.51   TIMER                                                                 03/14/2014 16:47:54 PAGE 6   

 297   5                     else
 298   5                        {
 299   6                        sensor_2ndstage_count = 0;
 300   6                        }
 301   5                     
 302   5                     // if there is no touch in 4s, reset sensor trigger status, etc.
 303   5                     if(++sensor_2ndstage_time >= 4000)
 304   5                        {
 305   6                        sensor_trigger_count = 0;
 306   6                        sensor_2ndstage_count = 0;
 307   6                        sensor_1ststage_count = 0;
 308   6                        sensor_2ndstage_time = 0;
 309   6                        }
 310   5                     }
 311   4                  break;
 312   4                  
 313   4                  // waiting for 3rd touch
 314   4                  case 2:
 315   4                     {
 316   5                     if((sensor_detect == 0)||(horizontal_sensor == 0))
 317   5                        {
 318   6                        // 2s LV is a effective touch
 319   6                        if(++sensor_3rdstage_count >= 2)
 320   6                           {
 321   7                           sensor_3rdstage_count = 0;
 322   7                           // stolen alarm speech enable
 323   7                           host_stolen_alarm1_EN = 1;
 324   7                           host_stolen_alarm2_EN = 1;                
 325   7                           }
 326   6                        }
 327   5                     else
 328   5                        {
 329   6                        sensor_3rdstage_count = 0;
 330   6                        }
 331   5                     
 332   5                     // if there is no touch in 4s, reset all.
 333   5                     if(++sensor_3rdstage_time >= 4000)
 334   5                        {
 335   6                        sensor_trigger_count = 0;
 336   6                        sensor_1ststage_count = 0;
 337   6                        sensor_2ndstage_count = 0;
 338   6                        sensor_2ndstage_time = 0;
 339   6                        sensor_3rdstage_time = 0;
 340   6                        sensor_3rdstage_interval = 800;
 341   6                        sensor_3rdstage_count = 0;
 342   6                        sensor_3rdstage_effcount = 0;             
 343   6                        }
 344   5                     }
 345   4                  break;
 346   4                  }
 347   3               
 348   3               // judge the wire broken, if yes, it means someone has cut the wire of magnet lock
 349   3               if((wire_broken == 0) && (wire_broken_count < 51))  
 350   3                  {
 351   4                  if(++wire_broken_count > 50)
 352   4                     {
 353   5                     host_stolen_alarm1_EN = 1;
 354   5                     host_stolen_alarm2_EN = 1; 
 355   5                     wire_broken_count = 51;
 356   5                     }
 357   4                  }
 358   3               
C51 COMPILER V9.51   TIMER                                                                 03/14/2014 16:47:54 PAGE 7   

 359   3               // judge whether battery has been stolen, 0.4V/4V
 360   3               if((ADC_check_result < 0x066) && (key_rotate == 0))
 361   3                  {
 362   4                  battery_stolen_EN = 1;
 363   4                  }
 364   3               
 365   3               }
 366   2            }
 367   1         
 368   1         // judge whether position sensor is enable
 369   1         if(position_sensor_EN==1)     
 370   1            {
 371   2            // judge whether there is a LV
 372   2            if(raised_sensor_detect == 0) 
 373   2               {
 374   3               // LV > 0.5s means a effective input
 375   3               if(++raise_wire_time==10)
 376   3                  {
 377   4                  // flag raised, and reset fell
 378   4                  raised_flag=1;
 379   4                  fell_flag=0;
 380   4                  // judge whether there once been a raised or fell.
 381   4                  if(raised_fell_once_flag == 0)
 382   4                     {
 383   5                     // if no, flag raised and fell flag
 384   5                     raised_fell_flag = 1;               
 385   5                     }
 386   4                  }     
 387   3               }
 388   2            else
 389   2               {
 390   3               raised_flag=0;
 391   3               raised_alarm_count=0;
 392   3               raise_wire_time=0;
 393   3               raised_fell_flag = 0;
 394   3               }
 395   2            // judge whether there is a LV
 396   2            if(fell_sensor_detect==0)
 397   2               {
 398   3               // LV > 0.5s means a effective input
 399   3               if(++fell_wire_time==10)   
 400   3                  {
 401   4                  // flag fell, and reset raised
 402   4                  fell_flag=1;         
 403   4                  raised_flag=0;
 404   4                  // judge whether there once been a raised or fell
 405   4                  if(raised_fell_once_flag == 0)
 406   4                     {
 407   5                     raised_fell_flag = 1;               
 408   5                     }
 409   4                  }     
 410   3               }
 411   2            else
 412   2               {
 413   3               fell_flag=0;
 414   3               fell_alarm_count=0;
 415   3               fell_wire_time=0;
 416   3               raised_fell_flag = 0;
 417   3               }
 418   2            }
 419   1         
 420   1         // judge whether raised or fell, if yes, reset all after 10s.
C51 COMPILER V9.51   TIMER                                                                 03/14/2014 16:47:54 PAGE 8   

 421   1         if(raised_fell_flag == 1)
 422   1            {
 423   2            if(++raised_fell_number >= 4000)
 424   2               {
 425   3               raised_fell_flag = 0;
 426   3               raised_fell_number = 0;
 427   3               raised_fell_once_flag = 1;
 428   3               
 429   3               sensor_trigger_count = 0;
 430   3               sensor_1ststage_count = 0;
 431   3               sensor_2ndstage_count = 0;
 432   3               sensor_2ndstage_time = 0;
 433   3               sensor_3rdstage_time = 0;
 434   3               sensor_3rdstage_interval = 800;
 435   3               sensor_3rdstage_count = 0;
 436   3               sensor_3rdstage_effcount = 0;             
 437   3               }
 438   2            }
 439   1         
 440   1         // detect the horizontal sensor
 441   1         if(((horizontal_sensor == 0)||(sensor_detect == 0))&&(horizontal_vibration_count > 5000))
 442   1            {
 443   2            Delay(3);
 444   2            if((horizontal_sensor == 0)||(sensor_detect == 0))
 445   2               {
 446   3               horizontal_vibration = 1;
 447   3               horizontal_vibration_count = 0;
 448   3               }
 449   2            }
 450   1         if(++horizontal_vibration_count >= 5000)
 451   1            {
 452   2            horizontal_vibration_count = 5001;
 453   2            horizontal_vibration = 0;
 454   2            }
 455   1         }
 456          
 457          
 458          /*--------------------------------------------------------------------
 459             timerT1()
 460             ¶¨Ê±Æ÷1Ã¿´ÎÒç³öºóÖ´ÐÐµÄ²Ù×÷
 461          --------------------------------------------------------------------*/
 462          
 463          void timerT1() interrupt interrupt_timer_1_overflow
 464             {
 465   1         // reload timer1
 466   1         TH1 = timer1_8H;           
 467   1         TL1 = timer1_8L;
 468   1         
 469   1         // receive a tyte
 470   1         receive_byte();
 471   1         
 472   1         // receive a word after every byte
 473   1         receive_word();
 474   1         
 475   1         // judge whether a byte has received successfully
 476   1         if(receive_data_finished_flag == 1)
 477   1            {
 478   2            receive_data_finished_flag = 0;
 479   2            // judge which mode is received.
 480   2            switch(received_data_buffer[2])     
 481   2               {
 482   3               case ComMode_1:  
C51 COMPILER V9.51   TIMER                                                                 03/14/2014 16:47:54 PAGE 9   

 483   3                  {
 484   4                  if((nearby_away_interval > 6)||(key_rotate == 1))
 485   4                     {
 486   5                     // if receive a ComMode_1 successfully, operation for slave nearby
 487   5                     slave_nearby_EN = 1;
 488   5                     nearby_away_interval = 0;              
 489   5                     }
 490   4                  leave_count = 0;
 491   4                  
 492   4                  // turn off vibration and position sensor
 493   4                  sensor_EN = 0;                   
 494   4                  position_sensor_EN=0;         
 495   4                  // reset all the flag in sensor
 496   4                  fell_flag=0;  
 497   4                  raised_flag=0;
 498   4                  sensor_trigger_count = 0;
 499   4                  sensor_1ststage_count = 0;
 500   4                  sensor_2ndstage_count = 0;
 501   4                  sensor_2ndstage_time = 0;
 502   4                  sensor_3rdstage_time = 0;
 503   4                  sensor_3rdstage_interval = 0;
 504   4                  sensor_3rdstage_count = 0;
 505   4                  sensor_3rdstage_effcount = 0;
 506   4                  stolen_alarm_flag = 0;
 507   4                  host_stolen_alarm1_EN = 0;
 508   4                  host_stolen_alarm1_count = 0;
 509   4                  host_stolen_alarm2_EN = 0;
 510   4                  host_stolen_alarm2_count = 0;
 511   4                  
 512   4                  raised_fell_flag = 0;
 513   4                  
 514   4                  // reset the wire broken count
 515   4                  wire_broken_count = 0;
 516   4                  
 517   4                  // reset the battery stolen flag
 518   4                  battery_stolen_EN = 0;
 519   4                  battery_stolen_count = 0;
 520   4                  }
 521   3               break;
 522   3               }
 523   2            }
 524   1         }
 525          
 526          /*--------------------------------------------------
 527             InitTimer()
 528             
 529             ³õÊ¼»¯¶¨Ê±Æ÷T0ºÍT1
 530          ---------------------------------------------------*/
 531          
 532          void InitTimer(const tByte Tick_ms_T0, Tick_us_T1)
 533             {
 534   1         tLong Inc_T0, Inc_T1;
 535   1         tWord timer0_16, timer1_16;
 536   1         
 537   1         //¼ÆËãTimer0µÄ¼Ä´æÆ÷Öµ
 538   1         Inc_T0 = (tLong)Tick_ms_T0 * (OSC_FREQ/1000) / (tLong)OSC_PER_INST;
 539   1         timer0_16 = (tWord) (65536UL - Inc_T0);
 540   1         timer0_8H = (tByte) (timer0_16 / 256);
 541   1         timer0_8L = (tByte) (timer0_16 % 256);
 542   1         
 543   1         //¼ÆËãTimer1µÄ¼Ä´æÆ÷Öµ
 544   1         Inc_T1 = (tLong)Tick_us_T1 * (OSC_FREQ/1000000) / (tLong)OSC_PER_INST;
C51 COMPILER V9.51   TIMER                                                                 03/14/2014 16:47:54 PAGE 10  

 545   1         timer1_16 = (tWord) (65536UL - Inc_T1);
 546   1         timer1_8H = (tByte) (timer1_16 / 256);
 547   1         timer1_8L = (tByte) (timer1_16 % 256);
 548   1         
 549   1         TMOD = 0x11;
 550   1         
 551   1         TH0 = timer0_8H;
 552   1         TL0 = timer0_8L;
 553   1         TH1 = timer1_8H;
 554   1         TL1 = timer1_8L;
 555   1      
 556   1         ET0 = 1;
 557   1         TR0 = 1;
 558   1         ET1 = 1;
 559   1         TR1 = 1;
 560   1         PT1 = 1;       
 561   1         EA = 1;
 562   1         }
 563          
 564          /*---------------------------------------------------------------------
 565             sEos_Go_To_Sleep()
 566             ½«MCU½øÈëÐÝÃß×´Ì¬
 567          ----------------------------------------------------------------------*/
 568          void sEOS_Go_To_Sleep(void)
 569             {
 570   1         PCON |= 0x01;    // Enter idle mode (generic 8051 version)
 571   1         }
 572             
 573          /*---------------------------------------------------
 574             end of file
 575          ----------------------------------------------------*/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1091    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     55      10
   IDATA SIZE       =   ----    ----
   BIT SIZE         =     24    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
